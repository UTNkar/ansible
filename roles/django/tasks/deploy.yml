- name: Copy firebase private key
  copy:
    src: "files/admininterface-privatekey.json"
    dest: "{{ install_root }}/{{ project_name }}/adminInterface/admininterface-privatekey.json"
    owner: "{{ process_user }}"
    group: "{{ process_group }}"
    mode: "0640"
  when: project_name == 'admininterface'
  notify:
    - restart socket
    - restart gunicorn
    - fix permissions
    - fix permission on private key

- name: Update pip
  pip:
    name: pip
    state: latest
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: "pyvenv"

- name: install python packages
  pip:
    requirements: "{{ install_root }}/{{ project_name }}/requirements.txt"
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: "pyvenv"
  notify:
    - restart socket
    - restart gunicorn
    - fix permissions
    - fix permission on private key
  become_user: "{{process_user}}"

- name: django migrate
  become_user: "{{process_user}}"
  environment:
    DJANGO_SECRET: "{{ django_secret_key }}"
    DJANGO_DB_PASS: "{{ db_password }}"
  django_manage:
    command: migrate
    app_path: "{{ pythonpath }}"
    virtualenv: "{{ virtualenv }}"
    settings: "{{ django_settings }}"

- name: fix permissions
  file:
    path: "{{ install_root }}/{{ project_name }}"
    state: directory
    owner: "{{ process_user }}"
    group: "{{ process_group }}"
    recurse: yes

- name: django collectstatic
  django_manage:
    command: collectstatic
    app_path: "{{ pythonpath }}"
    virtualenv: "{{ virtualenv }}"
    settings: "{{ django_settings }}"
  notify:
    - fix permissions
  become_user: "{{process_user}}"

- name: django cron
  django_manage:
    command: installtasks
    app_path: "{{ pythonpath }}"
    virtualenv: "{{ virtualenv }}"
    settings: "{{ django_settings }}"
  become_user: "{{process_user}}"
  environment:
    SENTRY_DSN: "{{ environment_variables.SENTRY_DSN }}"

- name: install gunicorn
  pip:
    name: gunicorn
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: "pyvenv"
  become_user: "{{ process_user }}"

- name: copy gunicorn service config
  template:
    src: templates/systemd/gunicorn.service.j2
    dest: "/etc/systemd/system/{{process_name}}.service"
    mode: "600"
  vars:
    working_dir: "{{ pythonpath }}"
  notify:
    - restart socket
    - restart gunicorn

- name: copy gunicorn socket config
  template:
    src: templates/systemd/gunicorn.socket.j2
    dest: "/etc/systemd/system/{{process_name}}.socket"
    mode: "600"
  notify:
    - restart socket
    - restart gunicorn

- name: copy gunicorn tmpfiles config
  template:
    src: templates/systemd/tmpfiles.gunicorn.conf.j2
    dest: "/etc/tmpfiles.d/{{process_name}}.conf"
  notify:
    - restart socket
    - restart gunicorn

- name: make sure gunicorn server is running
  service:
    name: "{{process_name}}"
    state: started
    enabled: yes
